{
	"@param": {
		"prefix": "@param",
		"body": "@param  ${1:parameter}  ${2:description}",
		"description": "@param",
		"scope": "source.pde"
	},
	"@private": {
		"prefix": "@private",
		"body": "@private",
		"description": "@private",
		"scope": "source.pde"
	},
	"@public": {
		"prefix": "@public",
		"body": "@private",
		"description": "@public",
		"scope": "source.pde"
	},
	"@return": {
		"prefix": "@return",
		"body": "@return  ${1:parameter}  ${2:description}",
		"description": "@return",
		"scope": "source.pde"
	},
	"abs": {
		"prefix": "abs",
		"body": "abs(${1:value});",
		"description": "abs",
		"scope": "source.pde"
	},
	"acos": {
		"prefix": "acos",
		"body": "acos(${1:value});",
		"description": "acos",
		"scope": "source.pde"
	},
	"alpha": {
		"prefix": "alpha",
		"body": "alpha(${1:color});",
		"description": "alpha",
		"scope": "source.pde"
	},
	"ambient": {
		"prefix": "ambient",
		"body": "ambient(${8:${3:value1}, ${4:value2}, ${5:value3}});",
		"description": "ambient",
		"scope": "source.pde"
	},
	"ambientLight": {
		"prefix": "ambientLight",
		"body": "ambientLight(${1:v1}, ${2:v2}, ${3:v3}${7:, ${4:x}, ${5:y}, ${6:z}});",
		"description": "ambientLight",
		"scope": "source.pde"
	},
	"append": {
		"prefix": "append",
		"body": "append(${1:array}, ${2:element});",
		"description": "append",
		"scope": "source.pde"
	},
	"arc": {
		"prefix": "arc",
		"body": "arc(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:start}, ${6:stop});",
		"description": "arc",
		"scope": "source.pde"
	},
	"Array": {
		"prefix": "Array",
		"body": "${1:int}[] ${2:numbers} ${6:= new $1[${3:length}]};",
		"description": "Array",
		"scope": "source.pde"
	},
	"arrayCopy": {
		"prefix": "arrayCopy",
		"body": "arrayCopy(${1:src}, ${2:dest}, ${4:, ${3:length}});",
		"description": "arrayCopy",
		"scope": "source.pde"
	},
	"ArrayList": {
		"prefix": "ArrayList",
		"body": "ArrayList<${1:String}> ${2:arraylist} = new ArrayList<$1>();",
		"description": "ArrayList",
		"scope": "source.pde"
	},
	"asin": {
		"prefix": "asin",
		"body": "asin(${1:value});",
		"description": "asin",
		"scope": "source.pde"
	},
	"atan": {
		"prefix": "atan",
		"body": "atan(${1:value});",
		"description": "atan",
		"scope": "source.pde"
	},
	"atan2": {
		"prefix": "atan2",
		"body": "atan2(${1:y},${2:x});",
		"description": "atan2",
		"scope": "source.pde"
	},
	"background_grey_alpha": {
		"prefix": "background_grey_alpha",
		"body": "background(${1:grey}, ${2:alpha});",
		"description": "background grey alpha",
		"scope": "source.pde"
	},
	"background_grey": {
		"prefix": "background_grey",
		"body": "background(${1:grey});",
		"description": "background grey",
		"scope": "source.pde"
	},
	"background_rgb": {
		"prefix": "background_rgb",
		"body": "background(${1:red}, ${2:green}, ${3:blue});",
		"description": "background rgb",
		"scope": "source.pde"
	},
	"background_rgba": {
		"prefix": "background_rgba",
		"body": "background(${1:red}, ${2:green}, ${3:blue}, ${6:alpha});",
		"description": "background rgba",
		"scope": "source.pde"
	},
	"background4": {
		"prefix": "background",
		"body": "background(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});",
		"description": "background",
		"scope": "source.pde"
	},
	"beginCamera": {
		"prefix": "beginCamera",
		"body": "beginCamera();",
		"description": "beginCamera",
		"scope": "source.pde"
	},
	"beginGL": {
		"prefix": "beginGL",
		"body": "pgl.beginGL();\n$1\npgl.endGL();",
		"description": "beginGL",
		"scope": "source.pde"
	},
	"beginRecord": {
		"prefix": "beginRecord",
		"body": "beginRecord(${1:renderer}, ${2:filename});",
		"description": "beginRecord",
		"scope": "source.pde"
	},
	"beginShape": {
		"prefix": "beginShape",
		"body": "beginShape(${1:kind});",
		"description": "beginShape",
		"scope": "source.pde"
	},
	"bezier": {
		"prefix": "bezier",
		"body": "bezier(${1:x1}, ${2:y1}, ${3:cx1}, ${4:cy1}, ${5:cx2}, ${6:cy2}, ${7:x2}, ${8:y2});",
		"description": "bezier",
		"scope": "source.pde"
	},
	"bezier3D": {
		"prefix": "bezier3D",
		"body": "bezier(${1:x1}, ${2:y1}, ${3:z1}, ${4:cx1}, ${5:cy1}, ${6:cz1}, ${7:cx2}, ${8:cy2}, ${9:cz2}, ${10:x2}, ${11:y2}, ${12:z2});",
		"description": "bezier3D",
		"scope": "source.pde"
	},
	"bezierDetail": {
		"prefix": "bezierDetail",
		"body": "bezierDetail(${1:detail});",
		"description": "bezierDetail",
		"scope": "source.pde"
	},
	"bezierPoint": {
		"prefix": "bezierPoint",
		"body": "bezierPoint(${1:a}, ${1:b}, ${1:c}, ${1:d}, ${1:t});",
		"description": "bezierPoint",
		"scope": "source.pde"
	},
	"bezierTangent": {
		"prefix": "bezierTangent",
		"body": "bezierTangent(${1:a}, ${1:b}, ${1:c}, ${1:d}, ${1:t});",
		"description": "bezierTangent",
		"scope": "source.pde"
	},
	"bezierVertex_3D": {
		"prefix": "bezierVertex_3D",
		"body": "bezierVertex(${1:cx1}, ${2:cy1}, ${3:cz1}, ${4:cx2}, ${5:cy2}, ${6:cz2}, ${7:x}, ${8:y}, ${9:z});",
		"description": "bezierVertex 3D",
		"scope": "source.pde"
	},
	"bezierVertex": {
		"prefix": "bezierVertex",
		"body": "bezierVertex(${1:cx1}, ${2:cy1}, ${3:cx2}, ${4:cy2}, ${5:x}, ${6:y});",
		"description": "bezierVertex",
		"scope": "source.pde"
	},
	"binary": {
		"prefix": "binary",
		"body": "binary(${3:value}${5:, ${4:digits}});",
		"description": "binary",
		"scope": "source.pde"
	},
	"blue": {
		"prefix": "blue",
		"body": "blue(${1:color});",
		"description": "blue",
		"scope": "source.pde"
	},
	"boolean": {
		"prefix": "boolean",
		"body": "boolean ${1:b} ${6:= ${3:true}};",
		"description": "boolean",
		"scope": "source.pde"
	},
	"box": {
		"prefix": "box",
		"body": "box(${4:${1:width}, ${2:height}, ${3:depth}});",
		"description": "box",
		"scope": "source.pde"
	},
	"break": {
		"prefix": "break",
		"body": "break ${1:label};",
		"description": "break",
		"scope": "source.pde"
	},
	"brightness": {
		"prefix": "brightness",
		"body": "brightness(${1:color});",
		"description": "brightness",
		"scope": "source.pde"
	},
	"byte": {
		"prefix": "byte",
		"body": "byte ${1:b} ${6:= ${3:127}};",
		"description": "byte",
		"scope": "source.pde"
	},
	"camera1": {
		"prefix": "camera",
		"body": "camera(${10:${1:eyeX}, ${2:eyeY}, ${3:eyeZ}, ${4:centerX}, ${5:centerY}, ${6:centerZ}, ${7:upX}, ${8:upY}, ${9:upZ}});",
		"description": "camera",
		"scope": "source.pde"
	},
	"case": {
		"prefix": "case",
		"body": "case ${1:expression} :\n\t$0\nbreak;\t",
		"description": "case",
		"scope": "source.pde"
	},
	"catch": {
		"prefix": "catch",
		"body": "catch (${1:Exception} e) {\n\t$0\n}",
		"description": "catch",
		"scope": "source.pde"
	},
	"ceil": {
		"prefix": "ceil",
		"body": "ceil(${1:value});",
		"description": "ceil",
		"scope": "source.pde"
	},
	"char": {
		"prefix": "char",
		"body": "char ${1:m} ${6:= \"${3:char}\"};",
		"description": "char",
		"scope": "source.pde"
	},
	"class": {
		"prefix": "class",
		"body": "${1:public }class ${2:${TM_FILENAME/(.*?)(\\..+)/$1/}} ${3:extends} {\n\n\tpublic $2 (${4:arguments}) {\n\t\t${0}\n\t}\n\n}\n",
		"description": "class",
		"scope": "source.pde"
	},
	"color": {
		"prefix": "color",
		"body": "color ${1:c} ${6:= color(${3:value1}, ${4:value2}, ${5:value3})};",
		"description": "color",
		"scope": "source.pde"
	},
	"concat": {
		"prefix": "concat",
		"body": "concat(${1:array1}, ${2:array2});",
		"description": "concat",
		"scope": "source.pde"
	},
	"const": {
		"prefix": "const",
		"body": "static final ${1:Object} ${2:VAR_NAM} = $0;",
		"description": "const",
		"scope": "source.pde"
	},
	"constrain": {
		"prefix": "constrain",
		"body": "constrain(${1:value}, ${2:min}, ${3:max});",
		"description": "constrain",
		"scope": "source.pde"
	},
	"copy": {
		"prefix": "copy",
		"body": "copy(${10:${9:srcImg}, }${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:dx}, ${6:dy}, ${7:dwidth}, ${8:dheight});",
		"description": "copy",
		"scope": "source.pde"
	},
	"cos": {
		"prefix": "cos",
		"body": "cos(${1:rad});",
		"description": "cos",
		"scope": "source.pde"
	},
	"createReader": {
		"prefix": "createReader",
		"body": "createReader(${1:filename});",
		"description": "createReader",
		"scope": "source.pde"
	},
	"createShape": {
		"prefix": "createShape",
		"body": "createShape(${1:type});",
		"description": "createShape",
		"scope": "source.pde"
	},
	"createWriter": {
		"prefix": "createWriter",
		"body": "createWriter(${1:filename});",
		"description": "createWriter",
		"scope": "source.pde"
	},
	"curve_3D": {
		"prefix": "curve_3D",
		"body": "curve(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2}, ${7:x3}, ${8:y3}, ${9:z3}, ${10:x4}, ${11:y4}, ${12:z4});",
		"description": "curve 3D",
		"scope": "source.pde"
	},
	"curve1": {
		"prefix": "curve",
		"body": "curve(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4});",
		"description": "curve",
		"scope": "source.pde"
	},
	"curveDetail": {
		"prefix": "curveDetail",
		"body": "curveDetail(${1:detail});",
		"description": "curveDetail",
		"scope": "source.pde"
	},
	"curvePoint": {
		"prefix": "curvePoint",
		"body": "curvePoint(${1:a}, ${1:b}, ${1:c}, ${1:d}, ${1:t});",
		"description": "curvePoint",
		"scope": "source.pde"
	},
	"curveTightness": {
		"prefix": "curveTightness",
		"body": "curveTightness(${1:squishy});",
		"description": "curveTightness",
		"scope": "source.pde"
	},
	"curveVertex_3D": {
		"prefix": "curveVertex_3D",
		"body": "curveVertex(${1:x}, ${2:y}, ${3:z});",
		"description": "curveVertex 3D",
		"scope": "source.pde"
	},
	"curveVertex1": {
		"prefix": "curveVertex",
		"body": "curveVertex(${1:x}, ${2:y});",
		"description": "curveVertex",
		"scope": "source.pde"
	},
	"default": {
		"prefix": "default",
		"body": "default :\n\t$0\nbreak;\t",
		"description": "default",
		"scope": "source.pde"
	},
	"degrees": {
		"prefix": "degrees",
		"body": "degrees(${1:rad});",
		"description": "degrees",
		"scope": "source.pde"
	},
	"directionalLight": {
		"prefix": "directionalLight",
		"body": "directionalLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${6:nz});",
		"description": "directionalLight",
		"scope": "source.pde"
	},
	"dist_3D": {
		"prefix": "dist_3D",
		"body": "dist(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2});",
		"description": "dist 3D",
		"scope": "source.pde"
	},
	"dist1": {
		"prefix": "dist",
		"body": "dist(${1:x1}, ${2:y1}, ${4:x2}, ${5:y2});",
		"description": "dist",
		"scope": "source.pde"
	},
	"doc_-_class": {
		"prefix": "doc_-_class",
		"body": "/**\n *  ${1:Description}\n *\n *\t@author ${2:$TM_FULLNAME}\n *\t@since  ${3:`date +%d.%m.%Y`}\n */",
		"description": "doc - class",
		"scope": "source.pde"
	},
	"doc_-_comment": {
		"prefix": "doc_-_comment",
		"body": "/**\n *\t${1:@private}$0\n */",
		"description": "doc - comment",
		"scope": "source.pde"
	},
	"ellipse": {
		"prefix": "ellipse",
		"body": "ellipse(${1:x}, ${2:y}, ${3:width}, ${4:height});",
		"description": "ellipse",
		"scope": "source.pde"
	},
	"ellipseMode": {
		"prefix": "ellipseMode",
		"body": "ellipseMode(${1:CENTER});",
		"description": "ellipseMode",
		"scope": "source.pde"
	},
	"else_if": {
		"prefix": "else_if",
		"body": "else if ($1) {\n\t$0\n}",
		"description": "else if",
		"scope": "source.pde"
	},
	"else1": {
		"prefix": "else",
		"body": "else {\n\t$0\n}",
		"description": "else",
		"scope": "source.pde"
	},
	"emissive": {
		"prefix": "emissive",
		"body": "emissive(${8:${3:value1}, ${4:value2}, ${5:value3}});",
		"description": "emissive",
		"scope": "source.pde"
	},
	"endCamera": {
		"prefix": "endCamera",
		"body": "endCamera();",
		"description": "endCamera",
		"scope": "source.pde"
	},
	"endRecord": {
		"prefix": "endRecord",
		"body": "endRecord();",
		"description": "endRecord",
		"scope": "source.pde"
	},
	"endShape": {
		"prefix": "endShape",
		"body": "endShape(${1:mode});",
		"description": "endShape",
		"scope": "source.pde"
	},
	"exp": {
		"prefix": "exp",
		"body": "exp(${1:value});",
		"description": "exp",
		"scope": "source.pde"
	},
	"expand": {
		"prefix": "expand",
		"body": "expand(${1:array}${3:, ${2:newSize}});",
		"description": "expand",
		"scope": "source.pde"
	},
	"fill_grey_alpha": {
		"prefix": "fill_grey_alpha",
		"body": "fill(${1:grey}, ${2:alpha});",
		"description": "fill grey alpha",
		"scope": "source.pde"
	},
	"fill_grey": {
		"prefix": "fill_grey",
		"body": "fill(${1:grey});",
		"description": "fill grey",
		"scope": "source.pde"
	},
	"fill_rgb": {
		"prefix": "fill_rgb",
		"body": "fill(${1:red}, ${2:green}, ${3:blue});",
		"description": "fill rgb",
		"scope": "source.pde"
	},
	"fill_rgba": {
		"prefix": "fill_rgba",
		"body": "fill(${1:red}, ${2:green}, ${3:blue}, ${6:alpha});",
		"description": "fill rgba",
		"scope": "source.pde"
	},
	"fill4": {
		"prefix": "fill",
		"body": "fill(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});",
		"description": "fill",
		"scope": "source.pde"
	},
	"float": {
		"prefix": "float",
		"body": "float ${1:f} ${6:= ${3:0.0}};",
		"description": "float",
		"scope": "source.pde"
	},
	"floor": {
		"prefix": "floor",
		"body": "floor(${1:value});",
		"description": "floor",
		"scope": "source.pde"
	},
	"focused": {
		"prefix": "focused",
		"body": "focused",
		"description": "focused",
		"scope": "source.pde"
	},
	"for_in": {
		"prefix": "for_in",
		"body": "for (${1:Object} ${2:o} : ${3:array}) {\n\t$0\n}",
		"description": "for in",
		"scope": "source.pde"
	},
	"for1": {
		"prefix": "for",
		"body": "for (int ${1:i} = ${2:0}; ${1:i} < ${3:len}; ++${1:i}) {\n\t$0\n}",
		"description": "for",
		"scope": "source.pde"
	},
	"frameCount": {
		"prefix": "frameCount",
		"body": "frameCount",
		"description": "frameCount",
		"scope": "source.pde"
	},
	"frameRate_(debug)": {
		"prefix": "frameRate_(debug)",
		"body": "frameRate",
		"description": "frameRate (debug)",
		"scope": "source.pde"
	},
	"frameRate_(set)": {
		"prefix": "frameRate_(set)",
		"body": "frameRate($0);",
		"description": "frameRate (set)",
		"scope": "source.pde"
	},
	"frustum": {
		"prefix": "frustum",
		"body": "frustrum(${7:${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far}});",
		"description": "frustum",
		"scope": "source.pde"
	},
	"function": {
		"prefix": "function",
		"body": "${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}",
		"description": "function",
		"scope": "source.pde"
	},
	"get_pixel": {
		"prefix": "get_pixel",
		"body": "get(${6:${1:x}, ${2:y}${5:, ${3:width}, ${4:height}}});",
		"description": "get pixel",
		"scope": "source.pde"
	},
	"get1": {
		"prefix": "get",
		"body": "public ${1:String} get${2/./\\u$0/}() {\n    return ${2:fieldName};\n}\n",
		"description": "get",
		"scope": "source.pde"
	},
	"glBindBuffer": {
		"prefix": "glBindBuffer",
		"body": "${2:// A buffer ID of zero unbinds a buffer object}\ngl.glBindBuffer(GL.GL_ARRAY_BUFFER, ${1:0});",
		"description": "glBindBuffer",
		"scope": "source.pde"
	},
	"glCallList": {
		"prefix": "glCallList",
		"body": "// execute a display list\ngl.glCallList(${1:list});",
		"description": "glCallList",
		"scope": "source.pde"
	},
	"glClear": {
		"prefix": "glClear",
		"body": "gl.glClear(${1:GL.GL_COLOR_BUFFER_BIT}${3: | ${2:GL.GL_DEPTH_BUFFER_BIT}});",
		"description": "glClear",
		"scope": "source.pde"
	},
	"glClearColor": {
		"prefix": "glClearColor",
		"body": "gl.glClearColor(${1:red}, ${2:green}, ${3:blue}, ${4:alpha});",
		"description": "glClearColor",
		"scope": "source.pde"
	},
	"glColor3f": {
		"prefix": "glColor3f",
		"body": "gl.glColor3f(${1:red}, ${2:green}, ${3:blue});",
		"description": "glColor3f",
		"scope": "source.pde"
	},
	"glColor4f": {
		"prefix": "glColor4f",
		"body": "gl.glColor4f(${1:red}, ${2:green}, ${3:blue}, ${4:alpha});",
		"description": "glColor4f",
		"scope": "source.pde"
	},
	"glDeleteBuffers": {
		"prefix": "glDeleteBuffers",
		"body": "${3:// Parameters are the same for glGenBuffers}\ngl.glDeleteBuffers(${1:4}, ${2:bufferObjects});",
		"description": "glDeleteBuffers",
		"scope": "source.pde"
	},
	"glDepthMask": {
		"prefix": "glDepthMask",
		"body": "// enable or disable writing into the depth buffer\ngl.glDepthMask(${1:flag});",
		"description": "glDepthMask",
		"scope": "source.pde"
	},
	"glFlush": {
		"prefix": "glFlush",
		"body": "// Empties buffers. Call this when all previous issues commands completed\ngl.glFlush();",
		"description": "glFlush",
		"scope": "source.pde"
	},
	"glGenBuffers": {
		"prefix": "glGenBuffers",
		"body": "// import java.nio.IntBuffer;\n// import java.nio.FloatBuffer;\n// import com.sun.opengl.util.BufferUtil;\n\n// You might need to create four buffers to store vertext data, normal data, texture coordinate data, and indices in vertex arrays\nIntBuffer bufferObjects = IntBuffer.allocate(${1:4}); \ngl.glGenBuffers($1, bufferObjects);\n\nint vertexCount = ${2:3};\nint numCoordinates = ${3:3};\n// vertexCount * numCoordinates\nFloatBuffer vertices = BufferUtil.newFloatBuffer(vertexCount * numCoordinates);\nfloat[] v = {0.0f, 0.0f, 0.0f,\n             1.0f, 0.0f, 0.0f,\n             0.0f, 1.0f, 1.0f};\nvertices.put(v);\n\n// Bind the first buffer object ID for use with vertext array data\ngl.glBindBuffer(GL.GL_ARRAY_BUFFER, bufferObjects.get(0));\ngl.glBufferData(GL.GL_ARRAY_BUFFER, vertexCount * numCoordinates * BufferUtil.SIZEOF_FLOAT, vertices, GL.GL_STATIC_DRAW);",
		"description": "glGenBuffers",
		"scope": "source.pde"
	},
	"glGenLists": {
		"prefix": "glGenLists",
		"body": "gl.glGenLists(${1:1})",
		"description": "glGenLists",
		"scope": "source.pde"
	},
	"glGetError": {
		"prefix": "glGetError",
		"body": "println(gl.glGetError());",
		"description": "glGetError",
		"scope": "source.pde"
	},
	"glLoadIdentity": {
		"prefix": "glLoadIdentity",
		"body": "// replaces the top of the active matrix stack with the identity matrix\ngl.glLoadIdentity();",
		"description": "glLoadIdentity",
		"scope": "source.pde"
	},
	"glPushMatrix": {
		"prefix": "glPushMatrix",
		"body": "// spush and pop the current matrix stack\ngl.glPushMatrix();\n$1\ngl.glPopMatrix();",
		"description": "glPushMatrix",
		"scope": "source.pde"
	},
	"glRotatef": {
		"prefix": "glRotatef",
		"body": "// rotation in degrees, x coordinate of a vector, y coord., z coord.\ngl.glRotatef(${1:deg}, ${2:x}, ${3:y}, ${4:z});",
		"description": "glRotatef",
		"scope": "source.pde"
	},
	"glScalef": {
		"prefix": "glScalef",
		"body": "// multiply the current matrix by a general scaling matrix\ngl.glScalef(${1:x}, ${2:y}, ${3:z});",
		"description": "glScalef",
		"scope": "source.pde"
	},
	"glTexCoord2f": {
		"prefix": "glTexCoord2f",
		"body": "// set the current texture coordinates - 2 floats\ngl.glTexCoord2f(${1:0.0f}, ${2:0.0f});",
		"description": "glTexCoord2f",
		"scope": "source.pde"
	},
	"glTranslatef": {
		"prefix": "glTranslatef",
		"body": "// multiply the current matrix by a translation matrix\ngl.glTranslatef(${1:x}, ${2:y}, ${3:z});",
		"description": "glTranslatef",
		"scope": "source.pde"
	},
	"glVertex2f": {
		"prefix": "glVertex2f",
		"body": "gl.glVertex2f(${1:0.0f}, ${2:0.0f});",
		"description": "glVertex2f",
		"scope": "source.pde"
	},
	"glVertex3f": {
		"prefix": "glVertex3f",
		"body": "gl.glVertex3f(${1:0.0f}, ${2:0.0f}, ${3:0.0f});",
		"description": "glVertex3f",
		"scope": "source.pde"
	},
	"green": {
		"prefix": "green",
		"body": "green(${1:color});",
		"description": "green",
		"scope": "source.pde"
	},
	"HALF_PI": {
		"prefix": "HALF_PI",
		"body": "HALF_PI",
		"description": "HALF PI",
		"scope": "source.pde"
	},
	"hex": {
		"prefix": "hex",
		"body": "hex(${3:c});",
		"description": "hex",
		"scope": "source.pde"
	},
	"hour": {
		"prefix": "hour",
		"body": "hour()",
		"description": "hour",
		"scope": "source.pde"
	},
	"hue": {
		"prefix": "hue",
		"body": "hue(${1:color});",
		"description": "hue",
		"scope": "source.pde"
	},
	"?": {
		"prefix": "?",
		"body": "? ${1:trueExpression} : ${2:falseExpression}$0",
		"description": "?",
		"scope": "source.pde"
	},
	"if": {
		"prefix": "if",
		"body": "if ($1) {\n\t$0\n}",
		"description": "if",
		"scope": "source.pde"
	},
	"image": {
		"prefix": "image",
		"body": "image(${1:img}, ${2:x}, ${3:y}${6:, ${4:width}, ${5:height}});",
		"description": "image",
		"scope": "source.pde"
	},
	"int": {
		"prefix": "int",
		"body": "int ${1:i} ${6:= ${3:0}};",
		"description": "int",
		"scope": "source.pde"
	},
	"join": {
		"prefix": "join",
		"body": "join(${3:strgArray}, ${4:seperator});",
		"description": "join",
		"scope": "source.pde"
	},
	"key": {
		"prefix": "key",
		"body": "key",
		"description": "key",
		"scope": "source.pde"
	},
	"keyCode": {
		"prefix": "keyCode",
		"body": "keyCode",
		"description": "keyCode",
		"scope": "source.pde"
	},
	"keyPressed_func": {
		"prefix": "keyPressed",
		"body": "void keyPressed() {\n\t${1}\n}",
		"description": "keyPressed",
		"scope": "source.pde"
	},
	"keyPressed": {
		"prefix": "keyPressed",
		"body": "keyPressed",
		"description": "keyPressed",
		"scope": "source.pde"
	},
	"keyReleased": {
		"prefix": "keyReleased",
		"body": "void keyReleased() {\n\t${1}\n}",
		"description": "keyReleased",
		"scope": "source.pde"
	},
	"keyTyped": {
		"prefix": "keyTyped",
		"body": "void keyTyped() {\n\t${1}\n}",
		"description": "keyTyped",
		"scope": "source.pde"
	},
	"lerp": {
		"prefix": "lerp",
		"body": "lerp(${1:value1}, ${2:value2}, ${3:amt});",
		"description": "lerp",
		"scope": "source.pde"
	},
	"lerpColor": {
		"prefix": "lerpColor",
		"body": "lerpColor(${1:c1}, ${2:c2}, ${3:amt});",
		"description": "lerpColor",
		"scope": "source.pde"
	},
	"lightFalloff": {
		"prefix": "lightFalloff",
		"body": "lightFalloff(${1:constant}, ${2:linear}, ${3:quadratic});",
		"description": "lightFalloff",
		"scope": "source.pde"
	},
	"lights": {
		"prefix": "lights",
		"body": "lights();",
		"description": "lights",
		"scope": "source.pde"
	},
	"lightSpecular": {
		"prefix": "lightSpecular",
		"body": "lightFalloff(${1:v1}, ${2:v2}, ${3:v3});",
		"description": "lightSpecular",
		"scope": "source.pde"
	},
	"line_3d": {
		"prefix": "line_3d",
		"body": "line(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2});",
		"description": "line 3d",
		"scope": "source.pde"
	},
	"line1": {
		"prefix": "line",
		"body": "line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2});",
		"description": "line",
		"scope": "source.pde"
	},
	"link": {
		"prefix": "link",
		"body": "link(${1:url}${4:, ${3:target}});",
		"description": "link",
		"scope": "source.pde"
	},
	"loadBytes": {
		"prefix": "loadBytes",
		"body": "loadBytes(${2:\"${1:filename}\"});",
		"description": "loadBytes",
		"scope": "source.pde"
	},
	"loadFont": {
		"prefix": "loadFont",
		"body": "${1:font} = loadFont(${3:\"${2:FFScala-32.vlw}\"});",
		"description": "loadFont",
		"scope": "source.pde"
	},
	"loadImage": {
		"prefix": "loadImage",
		"body": "loadImage(${1:filename});",
		"description": "loadImage",
		"scope": "source.pde"
	},
	"loadPixels": {
		"prefix": "loadPixels",
		"body": "loadPixels();",
		"description": "loadPixels",
		"scope": "source.pde"
	},
	"loadShape": {
		"prefix": "loadShape",
		"body": "loadShape(${1:filename});",
		"description": "loadShape",
		"scope": "source.pde"
	},
	"loadStrings": {
		"prefix": "loadStrings",
		"body": "loadStrings(${2:\"${1:filename}\"});",
		"description": "loadStrings",
		"scope": "source.pde"
	},
	"loadXML": {
		"prefix": "loadXML",
		"body": "loadXML(${2:\"${1:filename}\"});",
		"description": "loadXML",
		"scope": "source.pde"
	},
	"log": {
		"prefix": "log",
		"body": "log(${1:value});",
		"description": "log",
		"scope": "source.pde"
	},
	"mag": {
		"prefix": "mag",
		"body": "mag(${1:a}, ${2:b}${4:, ${3:c}});",
		"description": "mag",
		"scope": "source.pde"
	},
	"map": {
		"prefix": "map",
		"body": "map(${1:value}, ${2:low1}, ${4:high1}, ${5:low2}, ${6:high2});",
		"description": "map",
		"scope": "source.pde"
	},
	"match": {
		"prefix": "match",
		"body": "match(${3:str}, ${4:regexp});",
		"description": "match",
		"scope": "source.pde"
	},
	"max_array": {
		"prefix": "max_array",
		"body": "max(${1:array});",
		"description": "max array",
		"scope": "source.pde"
	},
	"max1": {
		"prefix": "max",
		"body": "max(${1:value1}, ${2:value2});",
		"description": "max",
		"scope": "source.pde"
	},
	"millis": {
		"prefix": "millis",
		"body": "millis()",
		"description": "millis",
		"scope": "source.pde"
	},
	"min_array": {
		"prefix": "min_array",
		"body": "min(${1:array}};",
		"description": "min array",
		"scope": "source.pde"
	},
	"min1": {
		"prefix": "min",
		"body": "min(${1:value1}, ${2:value2}${4:, ${3:value3}});",
		"description": "min",
		"scope": "source.pde"
	},
	"minute": {
		"prefix": "minute",
		"body": "minute()",
		"description": "minute",
		"scope": "source.pde"
	},
	"modelX": {
		"prefix": "modelX",
		"body": "modelX(${1:x}, ${2:y}, ${3:z});",
		"description": "modelX",
		"scope": "source.pde"
	},
	"modelY": {
		"prefix": "modelY",
		"body": "modelY(${1:x}, ${2:y}, ${3:z});",
		"description": "modelY",
		"scope": "source.pde"
	},
	"modelZ": {
		"prefix": "modelZ",
		"body": "modelZ(${1:x}, ${2:y}, ${3:z});",
		"description": "modelZ",
		"scope": "source.pde"
	},
	"month": {
		"prefix": "month",
		"body": "month()",
		"description": "month",
		"scope": "source.pde"
	},
	"mouseButton": {
		"prefix": "mouseButton",
		"body": "mouseButton",
		"description": "mouseButton",
		"scope": "source.pde"
	},
	"mouseDragged": {
		"prefix": "mouseDragged",
		"body": "void mouseDragged() {\n\t${1}\n}",
		"description": "mouseDragged",
		"scope": "source.pde"
	},
	"mouseMoved": {
		"prefix": "mouseMoved",
		"body": "void mouseMoved() {\n\t${1}\n}",
		"description": "mouseMoved",
		"scope": "source.pde"
	},
	"mousePressed": {
		"prefix": "mousePressed",
		"body": "mousePressed",
		"description": "mousePressed",
		"scope": "source.pde"
	},
	"mousePressed_func": {
		"prefix": "mousePressed",
		"body": "void mousePressed() {\n\t${1}\n}",
		"description": "mousePressed",
		"scope": "source.pde"
	},
	"mouseReleased": {
		"prefix": "mouseReleased",
		"body": "void mouseReleased() {\n\t${1}\n}",
		"description": "mouseReleased",
		"scope": "source.pde"
	},
	"mouseX": {
		"prefix": "mouseX",
		"body": "mouseX",
		"description": "mouseX",
		"scope": "source.pde"
	},
	"mouseY": {
		"prefix": "mouseY",
		"body": "mouseY",
		"description": "mouseY",
		"scope": "source.pde"
	},
	"nf": {
		"prefix": "nf",
		"body": "nf(${3:value}, ${4:left}${6:, ${5:right}});",
		"description": "nf",
		"scope": "source.pde"
	},
	"nfc": {
		"prefix": "nfc",
		"body": "nfc(${3:value}${5:, ${4:right}});",
		"description": "nfc",
		"scope": "source.pde"
	},
	"nfp": {
		"prefix": "nfp",
		"body": "nfp(${3:value}, ${4:left}${6:, ${5:right}});",
		"description": "nfp",
		"scope": "source.pde"
	},
	"nfs": {
		"prefix": "nfs",
		"body": "nfs(${3:value}, ${4:left}${6:, ${5:right}});",
		"description": "nfs",
		"scope": "source.pde"
	},
	"noCursor": {
		"prefix": "noCursor",
		"body": "noCursor();",
		"description": "noCursor",
		"scope": "source.pde"
	},
	"noFill": {
		"prefix": "noFill",
		"body": "noFill();",
		"description": "noFill",
		"scope": "source.pde"
	},
	"noise": {
		"prefix": "noise",
		"body": "noise(${1:x}${5:, ${2:y}${4:, ${3:z}}});",
		"description": "noise",
		"scope": "source.pde"
	},
	"noiseDetail": {
		"prefix": "noiseDetail",
		"body": "noiseDetail(${1:octaves}${4:, ${3:falloff}});",
		"description": "noiseDetail",
		"scope": "source.pde"
	},
	"noiseSeed": {
		"prefix": "noiseSeed",
		"body": "noiseSeed(${1:x});",
		"description": "noiseSeed",
		"scope": "source.pde"
	},
	"noLights": {
		"prefix": "noLights",
		"body": "noLights();",
		"description": "noLights",
		"scope": "source.pde"
	},
	"norm": {
		"prefix": "norm",
		"body": "norm(${1:value}, ${2:low}, ${3:high});",
		"description": "norm",
		"scope": "source.pde"
	},
	"normal": {
		"prefix": "normal",
		"body": "normal(${1:nx}, ${2:ny}, ${3:nz});",
		"description": "normal",
		"scope": "source.pde"
	},
	"noSmooth": {
		"prefix": "noSmooth",
		"body": "noSmooth();",
		"description": "noSmooth",
		"scope": "source.pde"
	},
	"noStroke": {
		"prefix": "noStroke",
		"body": "noStroke();",
		"description": "noStroke",
		"scope": "source.pde"
	},
	"noTint": {
		"prefix": "noTint",
		"body": "noTint();",
		"description": "noTint",
		"scope": "source.pde"
	},
	"Object": {
		"prefix": "Object",
		"body": "${1:Object} ${2:o}${4: = new ${1}($3)};",
		"description": "Object",
		"scope": "source.pde"
	},
	"online": {
		"prefix": "online",
		"body": "online",
		"description": "online",
		"scope": "source.pde"
	},
	"ortho": {
		"prefix": "ortho",
		"body": "ortho(${7:${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far}});",
		"description": "ortho",
		"scope": "source.pde"
	},
	"package": {
		"prefix": "package",
		"body": "/**\n *  ${1:Description}\n *\n *\t@author ${2:$TM_FULLNAME}\n *\t@since  ${3:`date +%d.%m.%Y`}\n */\n\npackage ${4:package};",
		"description": "package",
		"scope": "source.pde"
	},
	"param": {
		"prefix": "param",
		"body": "param(${1:s});",
		"description": "param",
		"scope": "source.pde"
	},
	"parseXML": {
		"prefix": "parseXML",
		"body": "parseXML(${1:rawString});",
		"description": "parseXML",
		"scope": "source.pde"
	},
	"perspective": {
		"prefix": "perspective",
		"body": "perspective(${5:${1:fov}, ${2:aspect}, ${3:zNear}, ${4:zFar}});",
		"description": "perspective",
		"scope": "source.pde"
	},
	"PFont": {
		"prefix": "PFont",
		"body": "PFont ${1:font};\n$1 = loadFont(${3:\"${2:FFScala-32.vlw}\"});",
		"description": "PFont",
		"scope": "source.pde"
	},
	"PGraphics": {
		"prefix": "PGraphics",
		"body": "PGraphics pg;\npg = createGraphics(${5:${1:width}, ${2:height}${4:, ${3:applet}}});",
		"description": "PGraphics",
		"scope": "source.pde"
	},
	"PI": {
		"prefix": "PI",
		"body": "PI",
		"description": "PI",
		"scope": "source.pde"
	},
	"PImage": {
		"prefix": "PImage",
		"body": "PImage(${1:width}, ${2:height});",
		"description": "PImage",
		"scope": "source.pde"
	},
	"pixels": {
		"prefix": "pixels",
		"body": "pixels[${1:index}]",
		"description": "pixels",
		"scope": "source.pde"
	},
	"pmouseX": {
		"prefix": "pmouseX",
		"body": "pmouseX",
		"description": "pmouseX",
		"scope": "source.pde"
	},
	"pmouseY": {
		"prefix": "pmouseY",
		"body": "pmouseY",
		"description": "pmouseY",
		"scope": "source.pde"
	},
	"point": {
		"prefix": "point",
		"body": "point(${1:x}, ${2:y}${4:, ${3:z}});",
		"description": "point",
		"scope": "source.pde"
	},
	"pointLight": {
		"prefix": "pointLight",
		"body": "pointLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${6:nz});",
		"description": "pointLight",
		"scope": "source.pde"
	},
	"pow": {
		"prefix": "pow",
		"body": "pow(${1:num}, ${2:exponent});",
		"description": "pow",
		"scope": "source.pde"
	},
	"printCamera": {
		"prefix": "printCamera",
		"body": "printCamera();",
		"description": "printCamera",
		"scope": "source.pde"
	},
	"println_var": {
		"prefix": "println_var",
		"body": "println(\"${1:var}: \"+${1:var});$0",
		"description": "println var",
		"scope": "source.pde"
	},
	"println_text": {
		"prefix": "println_text",
		"body": "println(\"$1\");$0",
		"description": "println text",
		"scope": "source.pde"
	},
	"printMatrix": {
		"prefix": "printMatrix",
		"body": "printMatrix();",
		"description": "printMatrix",
		"scope": "source.pde"
	},
	"printProjection": {
		"prefix": "printProjection",
		"body": "printProjection();",
		"description": "printProjection",
		"scope": "source.pde"
	},
	"private_function": {
		"prefix": "private_function",
		"body": "private ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}",
		"description": "private function",
		"scope": "source.pde"
	},
	"private_static_function": {
		"prefix": "private_static_function",
		"body": "private static ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}",
		"description": "private static function",
		"scope": "source.pde"
	},
	"private_static_var": {
		"prefix": "private_static_var",
		"body": "private static ${1:String} ${2:str}${4: = ${3:value}};",
		"description": "private static var",
		"scope": "source.pde"
	},
	"private_var_object": {
		"prefix": "private_var_object",
		"body": "private ${1:Object} ${2:o}${4: = new ${1}($3)};",
		"description": "private var object",
		"scope": "source.pde"
	},
	"private_var": {
		"prefix": "private_var",
		"body": "private ${1:String} ${2:str}${4: = ${3:value}};",
		"description": "private var",
		"scope": "source.pde"
	},
	"protected_function": {
		"prefix": "protected_function",
		"body": "protected ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}",
		"description": "protected function",
		"scope": "source.pde"
	},
	"protected_var_object": {
		"prefix": "protected_var_object",
		"body": "protected ${1:Object} ${2:o}${4: = new ${1}($3)};",
		"description": "protected var object",
		"scope": "source.pde"
	},
	"protected_var": {
		"prefix": "protected_var",
		"body": "protected ${1:String} ${2:str}${4: = ${3:value}};",
		"description": "protected var",
		"scope": "source.pde"
	},
	"public_function": {
		"prefix": "public_function",
		"body": "public ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}",
		"description": "public function",
		"scope": "source.pde"
	},
	"public_static_function": {
		"prefix": "public_static_function",
		"body": "public static ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}",
		"description": "public static function",
		"scope": "source.pde"
	},
	"public_static_var": {
		"prefix": "public_static_var",
		"body": "public static ${1:String} ${2:str}${4: = ${3:value}};",
		"description": "public static var",
		"scope": "source.pde"
	},
	"public_var_object": {
		"prefix": "public_var_object",
		"body": "public ${1:Object} ${2:o}${4: = new ${1}($3)};",
		"description": "public var object",
		"scope": "source.pde"
	},
	"public_var": {
		"prefix": "public_var",
		"body": "public ${1:String} ${2:str}${4: = ${3:value}};",
		"description": "public var",
		"scope": "source.pde"
	},
	"pushMatrix/popMatrix": {
		"prefix": "pushMatrix/popMatrix",
		"body": "pushMatrix();\n${1:}\npopMatrix();",
		"description": "pushMatrix/popMatrix",
		"scope": "source.pde"
	},
	"quad": {
		"prefix": "quad",
		"body": "quad(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4});",
		"description": "quad",
		"scope": "source.pde"
	},
	"radians": {
		"prefix": "radians",
		"body": "radians(${1:deg});",
		"description": "radians",
		"scope": "source.pde"
	},
	"random": {
		"prefix": "random",
		"body": "random(${1:value1}${3:, ${2:value2}});",
		"description": "random",
		"scope": "source.pde"
	},
	"randomGaussian": {
		"prefix": "randomGaussian",
		"body": "randomGaussian();",
		"description": "randomGaussian",
		"scope": "source.pde"
	},
	"randomSeed": {
		"prefix": "randomSeed",
		"body": "randomSeed(${1:value});",
		"description": "randomSeed",
		"scope": "source.pde"
	},
	"rect": {
		"prefix": "rect",
		"body": "rect(${1:x}, ${2:y}, ${3:width}, ${4:height});",
		"description": "rect",
		"scope": "source.pde"
	},
	"rectMode": {
		"prefix": "rectMode",
		"body": "rectMode(${1:CENTER});",
		"description": "rectMode",
		"scope": "source.pde"
	},
	"red": {
		"prefix": "red",
		"body": "red(${1:color});",
		"description": "red",
		"scope": "source.pde"
	},
	"resetMatrix": {
		"prefix": "resetMatrix",
		"body": "translate(${1:x}, ${2:y}, ${3:z});",
		"description": "resetMatrix",
		"scope": "source.pde"
	},
	"reverse": {
		"prefix": "reverse",
		"body": "reverse(${1:array});",
		"description": "reverse",
		"scope": "source.pde"
	},
	"rotate": {
		"prefix": "rotate",
		"body": "rotate(${1:rad});",
		"description": "rotate",
		"scope": "source.pde"
	},
	"rotateX": {
		"prefix": "rotateX",
		"body": "rotateX(${1:rad});",
		"description": "rotateX",
		"scope": "source.pde"
	},
	"rotateY": {
		"prefix": "rotateY",
		"body": "rotateY(${1:rad});",
		"description": "rotateY",
		"scope": "source.pde"
	},
	"rotateZ": {
		"prefix": "rotateZ",
		"body": "rotateZ(${1:rad});",
		"description": "rotateZ",
		"scope": "source.pde"
	},
	"round": {
		"prefix": "round",
		"body": "round(${1:value});",
		"description": "round",
		"scope": "source.pde"
	},
	"saturation": {
		"prefix": "saturation",
		"body": "saturation(${1:color});",
		"description": "saturation",
		"scope": "source.pde"
	},
	"save": {
		"prefix": "save",
		"body": "saveFrame(${2:\"${1:filename}\"});",
		"description": "save",
		"scope": "source.pde"
	},
	"saveBytes": {
		"prefix": "saveBytes",
		"body": "saveBytes(${1:filename}, ${2:bytes});",
		"description": "saveBytes",
		"scope": "source.pde"
	},
	"saveFrame": {
		"prefix": "saveFrame",
		"body": "saveFrame(${2:\"${1:filename-####.ext}\"});",
		"description": "saveFrame",
		"scope": "source.pde"
	},
	"saveStrings": {
		"prefix": "saveStrings",
		"body": "saveStrings(${1:filename}, ${2:strings});",
		"description": "saveStrings",
		"scope": "source.pde"
	},
	"saveXML": {
		"prefix": "saveXML",
		"body": "saveXML(${1:xml}, ${2:filename});",
		"description": "saveXML",
		"scope": "source.pde"
	},
	"scale_SIZE": {
		"prefix": "scale_SIZE",
		"body": "scale(${1:size});",
		"description": "scale SIZE",
		"scope": "source.pde"
	},
	"scale1": {
		"prefix": "scale",
		"body": "scale(${1:x}, ${2:y}${4:, ${3:z}});",
		"description": "scale",
		"scope": "source.pde"
	},
	"screenX": {
		"prefix": "screenX",
		"body": "screenX(${1:x}, ${2:y}, ${3:z});",
		"description": "screenX",
		"scope": "source.pde"
	},
	"screenY": {
		"prefix": "screenY",
		"body": "screenY(${1:x}, ${2:y}, ${3:z});",
		"description": "screenY",
		"scope": "source.pde"
	},
	"screenZ": {
		"prefix": "screenZ",
		"body": "screenZ(${1:x}, ${2:y}, ${3:z});",
		"description": "screenZ",
		"scope": "source.pde"
	},
	"screen.height": {
		"prefix": "screen.height",
		"body": "screen.height",
		"description": "screen.height",
		"scope": "source.pde"
	},
	"screen.width": {
		"prefix": "screen.width",
		"body": "screen.width",
		"description": "screen.width",
		"scope": "source.pde"
	},
	"second": {
		"prefix": "second",
		"body": "second()",
		"description": "second",
		"scope": "source.pde"
	},
	"set_pixel": {
		"prefix": "set_pixel",
		"body": "set(${1:x}, ${2:y}, ${3:color/image});",
		"description": "set pixel",
		"scope": "source.pde"
	},
	"set1": {
		"prefix": "set",
		"body": "public void set${1/./\\u$0/}(${2:String} new${1/./\\u$0/}) {\n    ${1:fieldName} = new${1/./\\u$0/};\n}\n",
		"description": "set",
		"scope": "source.pde"
	},
	"setSwapInterval": {
		"prefix": "setSwapInterval",
		"body": "// specify the minimum swap interval for buffer swaps.\ngl.setSwapInterval(${1:interval});",
		"description": "setSwapInterval",
		"scope": "source.pde"
	},
	"setup_OpenGL": {
		"prefix": "setup_OpenGL",
		"body": "import processing.opengl.*;\nimport javax.media.opengl.*;\n\nPGraphicsOpenGL pgl;\nGL gl;\n\nvoid setup() {\n\tsize( ${1:300}, ${2:300}, OPENGL );\n\tcolorMode( RGB, 1.0 );\n\thint( ENABLE_OPENGL_4X_SMOOTH );\n\tpgl = (PGraphicsOpenGL) g;\n\tgl = pgl.gl;\n\tgl.setSwapInterval(1);\n\tinitGL();\n\t$3\n}\n\nvoid draw() {\n\tpgl.beginGL();\n  \t$4\n\tpgl.endGL();\n\tgetOpenGLErrors();\n}\n\nvoid initGL() {\n\t$5\n}\n\nvoid getOpenGLErrors() {\n  int error = gl.glGetError();\n  switch (error) {\n    case 1280 :\n      println(\"GL_INVALID_ENUM - An invalid enumerant was passed to an OpenGL command.\");\n    break;\n    case 1282 :\n      println(\"GL_INVALID_OPERATION - An OpenGL command was issued that was invalid or inappropriate for the current state.\");\n    break;\n    case 1281 :\n      println(\"GL_INVALID_VALUE - A value was passed to OpenGL that was outside the allowed range.\");\n    break;\n    case 1285 :\n      println(\"GL_OUT_OF_MEMORY - OpenGL was unable to allocate enough memory to process a command.\");\n    break;\n    case 1283 :\n      println(\"GL_STACK_OVERFLOW - A command caused an OpenGL stack to overflow.\");\n    break;\n    case 1284 :\n      println(\"GL_STACK_UNDERFLOW - A command caused an OpenGL stack to underflow.\");\n    break;\n    case 32817 :\n      println(\"GL_TABLE_TOO_LARGE\");\n    break;\n  }\n}",
		"description": "setup OpenGL",
		"scope": "source.pde"
	},
	"setup1": {
		"prefix": "setup",
		"body": "void setup() {\n\t$1\n}\n\nvoid draw() {\n\t$0\n}\n",
		"description": "setup",
		"scope": "source.pde"
	},
	"shape": {
		"prefix": "shape",
		"body": "shape(${1:s}, ${2:x}, ${3:y}, ${4:w}, ${5:h});",
		"description": "shape",
		"scope": "source.pde"
	},
	"shapeMode": {
		"prefix": "shapeMode",
		"body": "shapeMode(${1:CENTER});",
		"description": "shapeMode",
		"scope": "source.pde"
	},
	"shininess": {
		"prefix": "shininess",
		"body": "shininess(${1:shine});",
		"description": "shininess",
		"scope": "source.pde"
	},
	"shorten": {
		"prefix": "shorten",
		"body": "shorten(${1:array});",
		"description": "shorten",
		"scope": "source.pde"
	},
	"sin": {
		"prefix": "sin",
		"body": "sin(${1:rad});",
		"description": "sin",
		"scope": "source.pde"
	},
	"size_OPENGL": {
		"prefix": "size_OPENGL",
		"body": "size(${1:200}, ${2:200}${3:, OPENGL});",
		"description": "size OPENGL",
		"scope": "source.pde"
	},
	"size1": {
		"prefix": "size",
		"body": "size(${1:512}, ${2:512});",
		"description": "size",
		"scope": "source.pde"
	},
	"smooth1": {
		"prefix": "smooth",
		"body": "smooth();",
		"description": "smooth",
		"scope": "source.pde"
	},
	"sort": {
		"prefix": "sort",
		"body": "sort(${1:dataArray}${3:, ${2:count}});",
		"description": "sort",
		"scope": "source.pde"
	},
	"specular": {
		"prefix": "specular",
		"body": "specular(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});",
		"description": "specular",
		"scope": "source.pde"
	},
	"sphere": {
		"prefix": "sphere",
		"body": "sphere(${1:radius});",
		"description": "sphere",
		"scope": "source.pde"
	},
	"sphereDetail": {
		"prefix": "sphereDetail",
		"body": "sphereDetail(${1:n});",
		"description": "sphereDetail",
		"scope": "source.pde"
	},
	"splice": {
		"prefix": "splice",
		"body": "splice(${1:array}, ${2:value/array2}, ${3:index});",
		"description": "splice",
		"scope": "source.pde"
	},
	"split": {
		"prefix": "split",
		"body": "split(${3:str}, ${4:delimiter});",
		"description": "split",
		"scope": "source.pde"
	},
	"splitTokens": {
		"prefix": "splitTokens",
		"body": "splitTokens(${3:str}${5:, ${4:tokens}});",
		"description": "splitTokens",
		"scope": "source.pde"
	},
	"spotLight": {
		"prefix": "spotLight",
		"body": "spotLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:x}, ${5:y}, ${6:z}, ${7:nx}, ${8:ny}, ${9:nz}, ${10:angle}, ${11:concentration});",
		"description": "spotLight",
		"scope": "source.pde"
	},
	"sq": {
		"prefix": "sq",
		"body": "sq(${1:value});",
		"description": "sq",
		"scope": "source.pde"
	},
	"sqrt": {
		"prefix": "sqrt",
		"body": "sqrt(${1:value});",
		"description": "sqrt",
		"scope": "source.pde"
	},
	"status": {
		"prefix": "status",
		"body": "status(${1:text});",
		"description": "status",
		"scope": "source.pde"
	},
	"str": {
		"prefix": "str",
		"body": "str(${3:\"${1:str}\"});",
		"description": "str",
		"scope": "source.pde"
	},
	"String": {
		"prefix": "String",
		"body": "String ${1:str} ${6:= \"${3:CCCP}\"};",
		"description": "String",
		"scope": "source.pde"
	},
	"stroke_grey_alpha": {
		"prefix": "stroke_grey_alpha",
		"body": "stroke(${1:grey}, ${2:alpha});",
		"description": "stroke grey alpha",
		"scope": "source.pde"
	},
	"stroke_grey": {
		"prefix": "stroke_grey",
		"body": "stroke(${1:grey});",
		"description": "stroke grey",
		"scope": "source.pde"
	},
	"stroke_rgb": {
		"prefix": "stroke_rgb",
		"body": "stroke(${1:red}, ${2:green}, ${3:blue});",
		"description": "stroke rgb",
		"scope": "source.pde"
	},
	"stroke_rgba": {
		"prefix": "stroke_rgba",
		"body": "stroke(${1:red}, ${2:green}, ${3:blue}, ${6:alpha});",
		"description": "stroke rgba",
		"scope": "source.pde"
	},
	"stroke4": {
		"prefix": "stroke",
		"body": "stroke(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});",
		"description": "stroke",
		"scope": "source.pde"
	},
	"strokeWeight": {
		"prefix": "strokeWeight",
		"body": "strokeWeight(${1:1});",
		"description": "strokeWeight",
		"scope": "source.pde"
	},
	"subset": {
		"prefix": "subset",
		"body": "subset(${1:array}, ${2:offset});",
		"description": "subset",
		"scope": "source.pde"
	},
	"switch": {
		"prefix": "switch",
		"body": "switch ($1) {\n\t$0\n}",
		"description": "switch",
		"scope": "source.pde"
	},
	"tan": {
		"prefix": "tan",
		"body": "tan(${1:rad});",
		"description": "tan",
		"scope": "source.pde"
	},
	"text_data": {
		"prefix": "text_data",
		"body": "text(${1:data}, ${2:x}, ${3:y}${5:, ${4:z}});",
		"description": "text data",
		"scope": "source.pde"
	},
	"text_stringdata": {
		"prefix": "text_stringdata",
		"body": "text(${1:stringdata}, ${2:x}, ${3:y}, ${4:width}, ${5:height}${7:, ${6:z}});",
		"description": "text stringdata",
		"scope": "source.pde"
	},
	"textAscent": {
		"prefix": "textAscent",
		"body": "textAscent();",
		"description": "textAscent",
		"scope": "source.pde"
	},
	"textDescent": {
		"prefix": "textDescent",
		"body": "textDescent();",
		"description": "textDescent",
		"scope": "source.pde"
	},
	"textFont": {
		"prefix": "textFont",
		"body": "textFont(${1:font}${7:, ${6:size}});",
		"description": "textFont",
		"scope": "source.pde"
	},
	"textLeading": {
		"prefix": "textLeading",
		"body": "textLeading(${1:size});",
		"description": "textLeading",
		"scope": "source.pde"
	},
	"textSize": {
		"prefix": "textSize",
		"body": "textSize(${1:size});",
		"description": "textSize",
		"scope": "source.pde"
	},
	"textWidth": {
		"prefix": "textWidth",
		"body": "textWidth(${1:data});",
		"description": "textWidth",
		"scope": "source.pde"
	},
	"throw": {
		"prefix": "throw",
		"body": "throw new Exception(\"${1:Name}\");",
		"description": "throw",
		"scope": "source.pde"
	},
	"tint": {
		"prefix": "tint",
		"body": "tint(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});",
		"description": "tint",
		"scope": "source.pde"
	},
	"translate": {
		"prefix": "translate",
		"body": "translate(${1:x}, ${2:y}${4:, ${3:z}});",
		"description": "translate",
		"scope": "source.pde"
	},
	"triangle": {
		"prefix": "triangle",
		"body": "triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3});",
		"description": "triangle",
		"scope": "source.pde"
	},
	"trim": {
		"prefix": "trim",
		"body": "trim(${3:str});",
		"description": "trim",
		"scope": "source.pde"
	},
	"try": {
		"prefix": "try",
		"body": "try {\n\t$1\n}",
		"description": "try",
		"scope": "source.pde"
	},
	"try..catch": {
		"prefix": "try..catch",
		"body": "try {\n\t$1\n} catch (${2:Exception} e) {\n\t$3\n}",
		"description": "try..catch",
		"scope": "source.pde"
	},
	"try..catch..finally": {
		"prefix": "try..catch..finally",
		"body": "try {\n\t$1\n} catch (${2:Exception} e) {\n\t$3\n} finally {\n\t$4\n}",
		"description": "try..catch..finally",
		"scope": "source.pde"
	},
	"TWO_PI": {
		"prefix": "TWO_PI",
		"body": "TWO_PI",
		"description": "TWO PI",
		"scope": "source.pde"
	},
	"unbinary": {
		"prefix": "unbinary",
		"body": "unbinary(${3:\"${1:str}\"});",
		"description": "unbinary",
		"scope": "source.pde"
	},
	"unhex": {
		"prefix": "unhex",
		"body": "unhex(${3:c});",
		"description": "unhex",
		"scope": "source.pde"
	},
	"updatePixels": {
		"prefix": "updatePixels",
		"body": "updatePixels();",
		"description": "updatePixels",
		"scope": "source.pde"
	},
	"var_object": {
		"prefix": "var_object",
		"body": "${1:Object} ${2:o}${4: = new ${1}($3)};",
		"description": "var object",
		"scope": "source.pde"
	},
	"var1": {
		"prefix": "var",
		"body": "${1:String} ${2:str}${4: = ${3:value};}",
		"description": "var",
		"scope": "source.pde"
	},
	"var_vector": {
		"prefix": "var_vector",
		"body": "PVector ${1:v} = new PVector(${2});",
		"description": "var vector",
		"scope": "source.pde"
	},
	"var_vector_xy": {
		"prefix": "var_vector_xy",
		"body": "PVector ${1:v} = new PVector(${2:x},${3:y});",
		"description": "var vector xy",
		"scope": "source.pde"
	},
	"var_vector_xyz": {
		"prefix": "var_vector_xyz",
		"body": "PVector ${1:v} = new PVector(${2:x},${3:y},${4:z});",
		"description": "var vector xyz",
		"scope": "source.pde"
	},
	"vertex_3D": {
		"prefix": "vertex_3D",
		"body": "vertex(${1:x}, ${2:y}, ${3:z}${6:, ${4:u}, ${5:v}});",
		"description": "vertex 3D",
		"scope": "source.pde"
	},
	"vertex1": {
		"prefix": "vertex",
		"body": "vertex(${1:x}, ${2:y}${5:, ${3:u}, ${4:v}});",
		"description": "vertex",
		"scope": "source.pde"
	},
	"while": {
		"prefix": "while",
		"body": "while ($1) {\n\t$0\n}",
		"description": "while",
		"scope": "source.pde"
	},
	"year": {
		"prefix": "year",
		"body": "year()",
		"description": "year",
		"scope": "source.pde"
	}
}
